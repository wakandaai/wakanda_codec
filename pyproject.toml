[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "codec"
version = "0.1.0"
description = "Neural Audio Codec Evaluation Framework"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Alex Gichamba", email = "alexgichamba@ieee.org"},
]
keywords = ["audio", "codec", "evaluation", "neural", "speech"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
]

dependencies = [
    "jiwer",
    "numpy",
    "pandas",
    "pystoi",
    "pyworld",
    "PyYAML",
    "scipy",
    "pysptk",
    "fastdtw",
    "soundfile",
    "torch",
    "torchaudio",
    "torchmetrics",
    "pesq",
    "tqdm",
    "pymcd",
    "omegaconf",
    "librosa",
    "onnxruntime-gpu",
    "requests",
    "transformers",
]

[project.optional-dependencies]
gpu = [
    "torch[cuda]",
    "torchaudio[cuda]",
]

[project.urls]
Homepage = "https://github.com/wakandaai"
Repository = "https://github.com/wakandaai/wakanda_codec"

[project.scripts]
codec-evaluate = "scripts.evaluate:main"
codec-librispeech = "codec.utils.librispeech:main"

[tool.setuptools]
packages = ["codec", "codec.evaluation", "codec.models", "codec.utils", "codec.datasets"]

[tool.setuptools.package-data]
codec = ["config/*.yaml"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["codec"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["codec"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pystoi.*",
    "pysptk.*",
    "pyworld.*",
    "fastdtw.*",
    "soundfile.*",
]
ignore_missing_imports = true